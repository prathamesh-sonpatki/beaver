package path;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "path.g".
 */
public class PathParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short NAME = 1;
		static public final short SLASH = 2;
		static public final short DOT = 3;
		static public final short COLON = 4;
	}
	static public class AltGoals {
		static public final short pathname = 5;
		static public final short filename = 6;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nTaDaEmZ0C1AT9ItfGoYqaVfRFBaSnwoX8Y8VHUYrV2N1bGx3PZCX0GoTgUxCYsPFM7gp" +
		"fxQxiQ0jREdi14vKgUqMDAeDw0qckLPwVA1GVGHjgnRiR7ilXMNMJvmnY57MUZZR1NXp4IH" +
		"p5sVl5fSoONNrBqLWqkNxnM$xyL3JNQdibGgRJJIc$9Ue5#f4F1ciYFW==");

	public PathParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 3: // winpathname = NAME.d COLON pathname.p
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final String d = (String) _symbol_d.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ArrayList p = (ArrayList) _symbol_p.value;
					 p.add(0, d); return new Symbol(p);
			}
			case 4: // pathname = SLASH filename.n
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final ArrayList n = (ArrayList) _symbol_n.value;
					 return new Symbol(n);
			}
			case 5: // pathname = SLASH NAME.n pathname.p
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ArrayList p = (ArrayList) _symbol_p.value;
					 p.add(0, n); return new Symbol(p);
			}
			case 6: // filename = NAME.n DOT NAME.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final String n = (String) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final String e = (String) _symbol_e.value;
					 ArrayList p = new ArrayList(); p.add(n); p.add(e); return new Symbol(p);
			}
			case 0: // $goal = winpathname
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $pathname pathname
			case 2: // $goal = $filename filename
			{
				return _symbols[offset + 2];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
