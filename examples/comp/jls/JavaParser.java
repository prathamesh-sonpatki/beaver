package comp.jls;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "java12.grammar".
 */
public class JavaParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short SEMICOLON = 1;
		static public final short IDENTIFIER = 2;
		static public final short RBRACE = 3;
		static public final short PLUSPLUS = 4;
		static public final short MINUSMINUS = 5;
		static public final short BOOLEAN = 6;
		static public final short BYTE = 7;
		static public final short SHORT = 8;
		static public final short INT = 9;
		static public final short LONG = 10;
		static public final short CHAR = 11;
		static public final short FLOAT = 12;
		static public final short DOUBLE = 13;
		static public final short VOID = 14;
		static public final short LPAREN = 15;
		static public final short RPAREN = 16;
		static public final short COMMA = 17;
		static public final short SUPER = 18;
		static public final short THIS = 19;
		static public final short NEW = 20;
		static public final short INTEGER_LITERAL = 21;
		static public final short FLOATING_POINT_LITERAL = 22;
		static public final short BOOLEAN_LITERAL = 23;
		static public final short CHARACTER_LITERAL = 24;
		static public final short STRING_LITERAL = 25;
		static public final short NULL_LITERAL = 26;
		static public final short PLUS = 27;
		static public final short MINUS = 28;
		static public final short LBRACE = 29;
		static public final short SYNCHRONIZED = 30;
		static public final short CLASS = 31;
		static public final short FINAL = 32;
		static public final short INTERFACE = 33;
		static public final short PUBLIC = 34;
		static public final short PROTECTED = 35;
		static public final short PRIVATE = 36;
		static public final short STATIC = 37;
		static public final short ABSTRACT = 38;
		static public final short NATIVE = 39;
		static public final short TRANSIENT = 40;
		static public final short VOLATILE = 41;
		static public final short STRICTFP = 42;
		static public final short RBRACK = 43;
		static public final short COLON = 44;
		static public final short QUESTION = 45;
		static public final short OROR = 46;
		static public final short ANDAND = 47;
		static public final short OR = 48;
		static public final short XOR = 49;
		static public final short AND = 50;
		static public final short EQEQ = 51;
		static public final short NOTEQ = 52;
		static public final short LT = 53;
		static public final short GT = 54;
		static public final short LTEQ = 55;
		static public final short GTEQ = 56;
		static public final short INSTANCEOF = 57;
		static public final short DOT = 58;
		static public final short LBRACK = 59;
		static public final short LSHIFT = 60;
		static public final short RSHIFT = 61;
		static public final short URSHIFT = 62;
		static public final short MULT = 63;
		static public final short DIV = 64;
		static public final short MOD = 65;
		static public final short WHILE = 66;
		static public final short DO = 67;
		static public final short FOR = 68;
		static public final short IF = 69;
		static public final short SWITCH = 70;
		static public final short BREAK = 71;
		static public final short CONTINUE = 72;
		static public final short RETURN = 73;
		static public final short THROW = 74;
		static public final short TRY = 75;
		static public final short COMP = 76;
		static public final short NOT = 77;
		static public final short CASE = 78;
		static public final short DEFAULT = 79;
		static public final short ELSE = 80;
		static public final short EQ = 81;
		static public final short MULTEQ = 82;
		static public final short DIVEQ = 83;
		static public final short MODEQ = 84;
		static public final short PLUSEQ = 85;
		static public final short MINUSEQ = 86;
		static public final short LSHIFTEQ = 87;
		static public final short RSHIFTEQ = 88;
		static public final short URSHIFTEQ = 89;
		static public final short ANDEQ = 90;
		static public final short XOREQ = 91;
		static public final short OREQ = 92;
		static public final short IMPLEMENTS = 93;
		static public final short IMPORT = 94;
		static public final short FINALLY = 95;
		static public final short CATCH = 96;
		static public final short THROWS = 97;
		static public final short EXTENDS = 98;
		static public final short PACKAGE = 99;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGUy4qKU$i$cbOJs01kYJpg8e89I54IK3eAWT#fPx$IyinVi3Ni7srbEHGL5L5GiW3I" +
		"bAA8YWe20WeAeW8828Y3MtVjcTfFiPafsym8ylUJxpPlTVvjl$bDsavT2D62cCxwIudC0DL" +
		"j0#r0BTZTDeRdq8PjlxKh$OU#ozzWizZxzbnwcE#XEDflDPE#m5Sv3paDqENjR#2f1Azdnx" +
		"5xMWVsLzMP7ilvi03kA7St#mavW9xAJsCdi5FPtzWzsAZkD$PFDeohi1dO4gyVwiBxMqMmP" +
		"MyXwKNEod9#TBwYbrSSwmahGL9f7ysa1VKGBQH4jfXlf1kTpjfnzGJ7hBzPVsIAsnBd1ViB" +
		"gHTTdzeNErVN5gU7Ke6gyB#nXgadFq7Eqske0tuDTNrh5kkNI5#iWtXTg35$qXNMW0yZcRJ" +
		"cVKe9TxxmUdY4vpeFEWuBXdSvSTZlAJUncTWkxbTt6xc23sH1sLmMotPjTAx9TnWwp#d5EF" +
		"Djig7KCFtO#0zjFsKVXsThVsDzGxVopTRfmjlPgUxLWsvwFjhKRLQLogo4RwdHnkb0xvsEW" +
		"RIIs3bsAKUSp#MCTSc8xGR3ztVwTitNQEMsTjZOUpWHx2#kE6TTIp8KQqfn#dXuLyY7q2Br" +
		"A4sWYJQB9z3gzmQMiX9MoE4kmAgmggyQgingiZDLajVYiTUE5XV1evxIZJjJ9UOGTuCntvj" +
		"CPT5Q4MLcV1W4yS$Dro6bMBkEPS$xh$9VrHERECO4zmZwJfRJUMMFqQWJzmy0arfHQqZhiB" +
		"$ixSvrhw3l8vqfGnVYPgdknz7DyFw4Fdqy#9zRmV6RE2QS1uwFr13N8QIO#8V8vpvd7ynbX" +
		"Nrn3pPt9OdpdwP0B7zeW#A1FOdphca0DaHD9ocfZX0rULhbLXyvtwh39pcJd3NOehHFZUpL" +
		"6UwjYV5KnfW1kMzhnPViwkw65NKoWXiuR2lb$dFjDNgmvRvyTpXeuKsb$sfyrTQuKu7vNIb" +
		"35U83syevaUm#Odro$in5JdSSLqdkT#unUNFyu$Ol#pPevZTbApACh1BZy2Wcg28EfddSas" +
		"tkW1aA$gmbMVxf0bhBQJdUZNtUdEvrF5zB5pc2hErrarNOkvw0hw1htA01LX6$P8Ez8jlT0" +
		"TmakuTVZayutpfDYVrWjV5Bt9yutz19T2zrDEQt7bNmzmgUzM8$Jic0YtInBwJPdeicBdk2" +
		"CwMcFyMZUItgVPjC8UahqyWEQGwUpkiwvz3YTeupGsJbN7FtL1AiniYfBkrbjJLxXs3ddqT" +
		"si6EnKCSwZ1xsZlvX0rz1z2kbZJZUZNpUdczMLdgIHz2oreL7EMcffVsr$JIz8Tm$3gAsot" +
		"HVf9U$uQ1FePHgha5v7lnYzNgFnM1d3dMUSuVIS$QeQN6#ripShOrnF8xsZeupu492bNzCW" +
		"anTjSBhIHk6hHbVWSDf4Fzkhx5NA68S3xj408pu192dzvZGqUZK46WbV9HX1suZ5M1tdMkS" +
		"wPOIqlBy9h3xRHI7Taxriz9kX0#wUcecrizRRlvgm8bK4QibQUST7ca1RSCsJvQinlYQ$fr" +
		"bRrW1t2i#oWvodf3KnnddQUTGv5JFiMUSfG161jSEwSO$x6V4JwwoGFkNym#YrDxLbdP23$" +
		"LXNcH$hmbOwZx9#x4pM03XR5O6rO#TvntrDO1UoInNI6UmYezVbx4fsDVZToAOv8wJyYH5c" +
		"rz58Dj4P0QWYj6FtUST7cC3kfwOA#GZseD7hl#mXzWJu3MDFoVpOa#nfQi96ElNPSsmKUr4" +
		"PePtzf7VSnmJsCgxRilHLDiRa1MQliK5iWiHCN64fpYPHANiT5bFOLFQcijtfrb7USMyJs2" +
		"0gKKZVeXzCNdYkF9UkOH$RmzXIZ5yJskmqPosj8vrcpj$SqNMESuvbnx3zw5leLUrkTexnZ" +
		"dkOGAsTdWhv2FQZoOlzv1p2VWNBtor2#$jPbbNab3bbLWbhwRIWLbQPLTFQsTh5sjsgplwc" +
		"Yc0TQ#tf7NSqmMfWxQ6GeosZrrvM8wk#rTHgOktjZBGEiB2MQMyyQpmykVzP0uXmZ8SpKXL" +
		"1QDpZ3YPGQzX9KbPF9VLv#Hy7mNQhNy3syPyvMtKHlEDzJH1sidmhaCKhmE57tubx$V3fih" +
		"HRpmHg2ZjP$YDWyihajoLuRhNtwtGHlEEzJ11sidmBaCKhm6#p8N#RixHRReB8dopV39YyC" +
		"lbjoiZVmNwTBe9tl8S9mawMRmAoU0Nu$P0fyUkojBkd2S9Ebly0PF4ASDXeuBSnIxkxco3i" +
		"PFb688jNWCFt1dxVPsbt9nE4dIp$7iZY5U2mmS1lGvPs3pP1sCdo3K0Mhm27zGP#wxEqUv0" +
		"9mawMhmUoU0Kuh3FmMvUbtVOc23jPlWx8ufLg$m4zDyz26S5vm3l#kmd2NvAonlHJDg$0Ox" +
		"CaIJv#PCsCxHxlt6Y6i0mf3Ue3ELgb8sXrL4TAjJ38364dorS1MRnItDOQndOjB#e8dlmC4" +
		"qGCMRetVBDufHWS9lvMTQegkHq6cDhzjmd2IfQZhMnUAGwTnT$gJdLbzZe3fdR$POAmakLe" +
		"AvkNr$fG$RYcR5GnXdhoqqqGth9yg58QyF9QVYmhjw7A68zvBVpJ1E4lonzJIWDUNjlPTxt" +
		"7b34Uy5eupGJXBqcnwocaGQ#m3#nwfdPps9FLKiEURCwUgTrJJ11M8QL1VGHsfdPFDa5OXP" +
		"G6zH7OcTezoGHX5L8Qr4TWPshtH1E4LKXfK1#1dQdT4qmGLY6bGNq4TgPsUvaWh49AW$e8x" +
		"4pj7cg2i0ef3UeZi3Ersya4OHLI6jH7O6TgTtyJX5L8QL0VWPsftPOc2AkGqg0#0Zj3k#mU" +
		"TZfxbFv1fydlws4V27VfVJrSo0Qn3vsvx5Zb#qWYFTW5x35s2Jk3$OUDOC#ovzbODbx85x4" +
		"bd9tJfZAoSze01vWWh49AW$hm3sExPveWh49AW$e8x4pjjZP1M8MK1lKHs9dQRMM2i0ef3U" +
		"eZi3ErUw09mYgaDAYFmCxGhjXHFg#CQpQverXLJUoiMbQrVBDB$byDXwKgTe9LF5hEh9xXM" +
		"Td3HIaAa2fEQ#tXEbQiXuuLzwhOIDhZtA9#sEFiSJfMpjbQLl2g8AknRj6m6ckFrR8wIyiA" +
		"NXLaDSOj6bPZx37QULL5omfU5MJrcbiqh5wpNrEnScurWNl9KXxFvANZe7ueOznYWl0AAGt" +
		"g8x1InRZP1E4LKXhKHs2bYd6J4Si0IIfY6RoyrfRfaC5A5UFB97o6tclnVZbpxtw$4t3bgU" +
		"kVrPSrJ6hJVg7ndH5wlrL9AF8loPrl1NJsqANzGkDR8$H#AvDGC97azbkywEpjjxW#wHSMt" +
		"2iJT1IzHSjf1NrfyFmg2GLpIMw$oOlEtdwJwvD#OS6zCk5ZhlMZg#LtVse#Ap85tAQ8T#0g" +
		"7lOKhiTwE9xTA#fpsBVcT#0clTAWVl0x5#KxjewjPniYS9kAM5ErtAPolO$RlqDnc#g7uFP" +
		"3Bjmy4eftBlivHikRU8XPppgmDgBUMa5kWGSBtCEdk9qVWfkYZ#pddBcj59#audtKv2x5xU" +
		"BGUVDonzv0tEEOdRUy2ORqTPfXYjiruRZPN$CYtjii65gbz5MAsp1FdfxLR$EIAKrhxRVTc" +
		"2RmzpO796yReNblixq1xMpWK12v9LDkp#15OyqrCqIz8H9co4ZlVbglxz7EznmA8lUevRBK" +
		"MUui3#h3W$kgOOor4RgD738$jfDQBakT9SuIgwzV7nxSLmrJBASQMgt6eHfvjLoMEek09Nv" +
		"z12pIGV1#HGsd2jgfmg7ahPJBKcSXiCYlZu25EWZUBskm1her72hUQhaiTHO02$twy12#IX" +
		"XZhOLkBOUITuRSdiQBsjfP0Csqf5S4J0k2#jFq80CLLDUFm2TfSFsWq#buEe7#JkVG4hgSk" +
		"j9IMaRVq1gQHg$GGpIOhg9kr8KE8VwkLFKrBxUhLCVK$S9nmHovLocs5#wAidncgeBNH#b$" +
		"IBxxYctRilJmtJNig9QlsM4jFvvBonMOn$cDrj7KHpoaznjIIrQkVjMA7gMER0$5grOdqid" +
		"a$a$nyBoolpt5wGmwAqi$CXy3wP8ySsb9XsdpmX$wlDoQTowvv#NURP0NoZ4lmojHNiRbdK" +
		"kepudwel47ZtOqstbxZf6Z7oCyh1gLPuoidIfHNkfMehpKooyNDZhFqRGFTaKUMxgIlP1Nt" +
		"fzKtfpIPPHy7qhcfmWFiM9PfikUc37YTNQsEA#S7c2MYFPxNg8DpIktx$CQxLVDgqZ3CgNs" +
		"T5wqhpbDvthlEFnhJjE3o7YkfNdDAQzpURUyHZihhz46vZNQ0tcDDZolqLx9QxHnUOqs9w$" +
		"HjkGrscyvtvbbH6Exy$$na#OE8ilxRLw2x$Uv#lgke9htsuHvi5$Wwx1DcUzQg42FSlRDKu" +
		"yqxyFuq$KevvcJfrcdc3cXUwIUTOKUfLdbOt$geM9b$v24gXzgkSzU#VfgEcOeR4eY#Veg#" +
		"TvtA#GoWqrgUL0V5dd8RY$78d8i3XKVjLn8Q#fxuSOBYy3$FZCVqly#lJnfxaFz#l3teKuH" +
		"E1TnA7kZb0kfAGT5KL3XaUpZCBJ9E9Hib7ATjLyV0INmAE5GnbBATTP#VGGKmwEOGnbBATT" +
		"P#$NXON#BkVSjXogMMgwpzkiZu3juVCUXZAMKwwpz#l1mQYDhjJbKiTHodRLVRmBT7pZ7kd" +
		"HgSYXZAUKwQxy#0ihWmRzTfqmPIodNMVlruM6lnxYjvr35KijrrdvzUF3FOejFIQi$awsKw" +
		"wpz#WYeIk8Jw$9draKifLndxTT7G08U2GvbBALSP#tNHq0S7d4EPIobN6VjrqT0AJnAEPIn" +
		"b7ATjLyV0J5un3YKiPHodRLV7m4EFCH36KifrrdxzH4UDZni3cKifLndxTT7mE$m#9r36Ki" +
		"frrdxzH7m6pn#ur36Kifrrdvz1FmAZryvbB6KSfsrNny1ly3Z5mvbBALSP#tNHq1UtWicwo" +
		"CWB#$galNXOM$1rNGBXogMMgwpzkjDe0s1ywtmsCgXZAMKwwpz#WZO38$D7CfOIhdEsgytW" +
		"GO5pd#4nuySobXAkSxQhu#0d#3n4uSobbAki$Rh8s37pyHry5Z7eOobbEki$VhmYF2h6UCH" +
		"Utpw$LREG5uuHAlZkLwymtmr$oxof3puyAIfxo$aNcnNwixMfFKci6$yPrxGfcZpil3zOEw" +
		"h9wb#sD$m8dx19FrOIVkw$SYG9tEib8B7chHU3pgF1SyR9Vsjr6iI$3Coka$MU6rz7VML4y" +
		"Q$cIdzoabVfnQYrU9GjUNAAUFR9jFMoi$LUF7qeDR#Cnlt5$Pl7AfikdBfSqIUr9Vr5fbw4" +
		"zZ6m3ckxlOl76vkCzhov1cy86LxwxFWnjCZsQ87tE7Olt8eSw2KwwpzUXCoB7x6#SySobXA" +
		"kSxQhpSXQE5SY6nUoA6AfPRhhFrw4p8iBi3v1HpAM4gvpjglDo73udoSdy#XZAMKwwpzUXE" +
		"25XLw9VP8#rECwQVy5q1KJEnFkJwSDAZNGxB0rSTUoQ6CfPJhhFrwFIGBx1xsLnpAM4gvpj" +
		"glrqEoM8tprHpAM4gvpjglrqEoM8NpLHpAM4gvpjglroFJeWBpU405VD#qFmIF3xLz#52bK" +
		"qk3UZtI5dGSlKSVsn$X$2Djh8zKEhKqgDT3ilWIvrzgOtsfqgcbGRqUaiKNEFz26#iBbKuj" +
		"3Uhra2nMu7o5DjOAbKuj3Uhra2m#n$ddsbYVgtHgQL2lXsIn7EVBjR6MgtHgQL2lXsIn3EV" +
		"BjB6MgNHgQL2lXsJn6Su$qyRwJALJIuDwFIIBfJXVgesrLALJIuDwFIGBx93s4csi9IgTMX" +
		"hKwo5PV8BpJxInFb7frDAWNezCYzpVdvvwjBGN8#PY#Nt27f$5N2#nvDAgoVS9PppEeBEuN" +
		"ezaXDHvRhseUDzD3$TTzb6lsToBNxDds7FHnxdQKPwhqgcbGRqUQGllYhq0vmkqiHQeT6ff" +
		"KA#7P34Vv$EriUQhT6ffKA#7PB4GvmkriHQgT6ffKA#7P34Fv$EqiUQfT6ffKAz7siAT1pd" +
		"VTtwUi#SNENxco#GrIkTbJq1$9wHoyx5RlCSeUq9An$UbZtswT3ubAVSIdZsJNdea8wIm2E" +
		"UBv5Qyo8jKEhKqgDSZqoAtdT5#AiTH2$VWEsCkdy3LVjg9ysMhS#URhR$iAvq$kofBFtqFn" +
		"fz5HEatzy$ooMDJlqDT#OppGzTlvrrBlAVBUJSJsdxpUf1i7$3pvsqxtWTOdPsvZlXsFFat" +
		"V8tZEIZu6xxMOS5ltnDnnt4lnMy3Z#4GROx9X2ckREt3gnmYvgiINk4GkbSaoDOPVXgyp25" +
		"YlYpX9GwXUqc2R9tXfy5e3X5pj8GNEOJkHGcoTOQV1YzmY9WlI7YEG#YUao1RP$YfiGskb6" +
		"5s0ECU8EPyz7RrNl$FxPeU5NcEyTV2p2cqMsYt8kqw7paVvTekzrN3MzUvFNUQwTiPZ2iLx" +
		"VpPrhVfKP6TyhC$ravfumxAVaaDyMnKhV4zxD6yg24Yg7Muax9Vr82teTG4sds15mru2shD" +
		"y$1wNWFUXb8JQ7SKBnhm5jGQtCdPpsd0sr1g0kq#oui6l0MrvXbuFQC1RqEf2RGxaXSDU0j" +
		"gpTFmUbe3tePI4sXt12yQy1QK6jCg42rKQ1s95jGxz10ExkuU#M7w3XNPskV7zNToY6TuTs" +
		"P25pFjfyOVQuVw8rxh$t$QTUxW43FkZam4E6Mi0TawwEVSpY7c$UqIRkCGLhT9aAqp$3Hud" +
		"aF4V5x2A0wX6oL1jixmq#0k3X7pBWd3E8Hkc0JPEiDFWtiuHCnx9DpD8NHtIv2jC$mq6CiX" +
		"OexDX77VagnzVhdSvHwRazUxpcKSWj5b4Yxb4BfBCw6qlomPJRPFuH8E4VCI2HTp2Dt5cL3" +
		"QNvAC9jkdS167Y7cHXAiuXEwgJ2ZjBqf6a#sJi3$0rVm3tQZR7oXrnz0x2cd0Iu#qHSGPyB" +
		"U8zYT5j3ybelsf4Ut$6T7#p8ZsPzkpaTdPsb6PhTHb6ylP9gGj8dAT5T7#4$jzjFI#bkNxG" +
		"PtzkYYQljclSxthfOVFOWwEvd2l9EW8NxGvN1yvhtDCI5j4onDZpZxw#mNJDugu3wRyjkLi" +
		"$vqpjybM6TjiYJOrdavJbQVZPTkP8y6RtyxiJ8Y#tUdCORUZIB#N9DkduCqgvtq9ippDh4n" +
		"ex5D#MhpdHNnFWlS$ClN$pXJsAJyjlD5ptf7WlVRapCo4nZxbfqNoypnlIvZXQMPaGcEVyj" +
		"FYBI$YMnBUz3HlPa9Zd$BJOheNSRe4xvhfV909ZNtAJmVJ#bAl4XkpoNvFk$kybzGvgpbqT" +
		"a4Tzz93cFo5tgPFtPXwq23dQmvjgz3PcDlskpeB#rrPvyRKWmPnBptI$6si3bkxUzll97Ns" +
		"JBTex6RwTTnB3r$RCqtmvNWjXpQ3qDdOYUnPMdQpP9qRKmVQcvxZNdeGVuOhs4LuBKBp3QK" +
		"wtYckslt6PxFKuUyNDRwAZlMpmbcXkCeirMAnmzdL4Isiq27DWisZFTWDbljBpOjrI5fRNP" +
		"BSQNVJBnjPFTpsCzAo2#rAkr5TfUTAgkCiJlwo4HuxkUoi0y5kFqJSLqXhPN8ctsyYMTulk" +
		"DflMAtir3NSwiAItn#$kwjrTLORUnBE9gNOxSnQi$qXRs69KRSdsPFWwN7cNacaxw$ioLPp" +
		"Up9QRss9zw9QpRYN2#fjJmOcmcgYFz$#7jaJ$Rfap2IejvNwJLhBz$klt4juzWnwMljanlB" +
		"aReyOMHIZ8Ygc4YgbE2Me2bMbQbITQb0PrKHkQoFhEtizheDirQKzQ4ygfxse7jMd1jIG6b" +
		"5ZQa9DgHdMMtDnBzQIzgNzQ7zgHQtf03gGsb1RQaVjwI0wM7np$o7KYGwbpdGO7KvTg2jre" +
		"#xK0ynxKM$g8pB9w4ZgZxj4$jcfC$2yuYmw6$VKvz9vT3vTG1VIGBg8BgPBw5AwZ2wdAz07" +
		"plKQ6cJWDHXhvYwwc#wXU#a#t9FUJm$GW$IGk4Ty1AjzA3r6Z#FkTHWDfoTnhpe2zvGTwHb" +
		"w5dUlax4Vl81SVKdy6z0iiHh7IZdZkJf5hDUlQ2kUFV4#bDDlj1QSmlU5ZuOb#h85tZnVcR" +
		"xVvzINqqHVQi6NzuNxZlH#Hu6XB#KH6BwvZRFzYs0uZbPudDnid#vzaevXj2T7p6Ti6x1bW" +
		"YsFpjcE5gFT0IrOQ66ioD247DXol$9jmBQMOCkZSxOnmTPjgoROvheF74L7u$hvLpntF9QE" +
		"ex#9PtKdqabYNaNR1$YvkrxAHNiyStsfNuJCZKE4ZjiWSvC3cJDdYgzzELCZuMNQCQSYjZi" +
		"MCn3z3HItbJSXaLjHxPWMxc5uzWOOMbc4vzl$Y93FcOXwiiXd9WVEhYF#Biufd#KYdtnyUJ" +
		"x3yob3gzjYPRYx3kzJzl4z6LfvV2sCi6byNG#UVJwxfsA4tLPcO8J3ZI$topQ#bcWX6$#J5" +
		"VnPblbPI$XD5Va$3PZXjL8UUdwMXvwVsVYpdFZpjSLZdYhMcPK3$vbP#IyEmR#pPlwO#NFE" +
		"EyDx7FWpd9LvhQp1l0kxFsIVFnqYxWyChDphQgOFlsjf0Ms7dDRZOB4UkGzVZzdkKMifCrf" +
		"JZAs#h#5w6GEkfAkK6ULpYcVKp6uLSY2p6q8RyyBECh1huOstcTz8P4gLlUppSJt#ZeG5Gq" +
		"iMm5le8BN1nqV5hnvim$2hXoBpu$SAPdxZn3MNttjrrDwZr1AegLdl8qFn8#L#b8rVHv4rS" +
		"tuPZG5ukof#DRtPbnk$5Y76bndrt68axkzgQSOtVRqoyskXd7ynQ4pyJDV0uDffeHbV$etL" +
		"OVWDLkuksSQNuTc09NRrqIYPSLyJiuuXV#vTdufV$P3ZQodvTSmoldpdVWUUFCj7IN6$yFY" +
		"vqTNvgmzcOVYLATVl0h4$c$Zngvo5AyBNYlov8nn3$duqv8#5v3TOcJypltBQZ5OjSHsMyr" +
		"UJFgVneW#VYxyLurUkt9#76FcvznD3f8Z9A#m2N67BnFEi8RZcg$Xz4v9VESrMNj$CzyEZn" +
		"RMZfG0VQNu$F06hYg4zTtG70DCHVvPcVCj2ph$1i8W#lhprCi6o3ECxG8mYRw4cM0x0#gqf" +
		"M3CnFjEL$5Z8$37b$fTjVoaJwxASLYDoSgrqG1cIsl#Ouv0blZDMcJ#X2PK$s2do1wc1d$#" +
		"BPkce99EKvBN0cN9$2SjFs4NEN#QNuVhvkVdB5pzD$Yh0JvoFB#Jlpve$ILVWL#1Nu5Tf#V" +
		"4hhVcXvXVk#P66NqVp$PN4u0qjjrbqQfRyPNdzHSrGIFComhm58yES#ELhX0KxpHsMDyBRX" +
		"HsFBt4xMQmEy$tV3cCdv3kKNVQLgvvvL5u1Tg7ld4FiAygLMs0Nvf5brziEEruMVWLs1NO5" +
		"TWLs1NO5TWLs1NO5TWLs1NQLb5to$seuUaRptw3eptPcXsSb$jiJevK1sRUf8zt$IBFzPxv" +
		"bnNBbijBchC2gm6exxX2LSz$w8x9IlwSe7AkmhCsiV7QZlLgyHzqxdY3#kjRkPrMcf#nFeN" +
		"T4xLb7V8#wsLhtFhEJLSnJZ7pCFOcFkSA#KZCNrw42yuenZ$0ENC7w6XeaS$Qn7a9tYJhhE" +
		"t1LVOJaHPINw6LwXLxzSt3pE2ZUkHpW68cRi1mi$jvDzuYwWjmoCZOfLswgFkREZGQBlF5t" +
		"Psjo5prloTpH914tRtcJ6KRbvirYiOi8XY#2OPAROHSnpldjiOluU4iy$ZIyFRd4cz#X#Cw" +
		"YyJRUeMnxtdHAPU6T7la2xmBlABnD#mdkmFEsd$YYwdY7lr$XdwIvMbpRhgNhw7gwWMwac#" +
		"XckeLkfTleTlujGkfhgImDTvMYCS7x1Lzln5MAtWhncQcANHytIQCJ#lfOyJkQGilRekKmy" +
		"pZFqSQO#iZdiIGnlRemHl#T4swqVAzfZrDVwcVkXzIBvsXKdZCP$LLYBo$vvrAvyk8uXRnK" +
		"V1qB5cwqxJf6L5CtHjicBvLgZ0fvsGxN80FpQNbjAR$HydqbpllC5HcKP#wqBBEb7ae3SVH" +
		"hfUvXPOwcVIqXGnBgjHjn$8TwhbM8LeZs$nDDh2jrD1RzxbT8#VzYA#3hM##Qzzk4UUZ#Zr" +
		"leKQ57XHxjm1xbPtyA#IuDNp#qht1xh#weNr#Dzafn#jqhYjTNip7Gv3yQWtnaDyV$5EIn5" +
		"tdvdzQsOl276Scy$CTdHsInmA30eC2WmA30eC2WmA30eC2WmA30eC2WmA30O3inoFdJ1a7k" +
		"BbVn$cttkyWDtDFVNvZY#cn8xg$xkNi#lCrt8$HZcV3Iz2CPayPdxuT2dbC$wBkK$xkf8#z" +
		"rHqKRPLwzBFB$KrewmLTE$E#yxy2$#oVGJl8zf85lc$H6KFF$oH0z7nnr$cTgFGPbFadmsq" +
		"wpCMYfPv2P1SFhNnlqMSZ609uxU0yeC2WmK32es2knsvs$iDYX6Immg9GCAZAFA#ARzRFys" +
		"xpd1GO51WK61GO51fM9GSxlJq#rPtbNLIb2jbwatoUSeUE$#xWTUb7nlXl7GRpBFlBpODvt" +
		"zvgzu#T6WK61GSNkMNFtpEqpNwOLtKBh5SXmnbaBtpSByRKPzZFQwGn7tyrs$8Zdjf$cy8x" +
		"4y3jgj5y3zdpukxIrdtOIxnIyAtU#sVfBh#lywJrpFmFdowDSHRmyPVlaiQ7VOQvyvlcXwp" +
		"TQ5VrMtoce#YtgiDzMn$kz7Uy3tFUPwlkZ7Syi$V7Ulyfx8$Cnj9db5#jClxQdZrbeh$Atb" +
		"$ShfTuhk8SOLWsVlT7NcjRh$xbTqwE2pp4ACwVGRg7T2hJhVjDOZkqQxWAYtUi6dpkbTuOi" +
		"TwUd$DdMTs6d$EEkf4AxXNOhNRkcktN3TwXKv1cUBcQsk8KTgj1kljejlB9HQ2zgUpdlMxd" +
		"TvURcbME#7EFl5kH$VFuuxJaxxlyKKU$a2$Pc#p$pM4RgMpw#3TtNDpTQmBhIvZN7RnJnMD" +
		"NFwRzpnZR5zo1hsyIELZ$Y$stqtscdrGYfVWyqtf4NsYgqLHdQYhXAGkwNwNiAivqu2xjdP" +
		"V#4MDPMer$BGhGQQRyFaxlm7FEJEp$7ofX1S7BPXNyjGhDMTBnJNCFymhtxodwsznGeVmlD" +
		"i1RTg4D2iqZzicGOUvherQVG5ECl6ttWMcLavMFwX9RGKkNl1Gsc8OYQ#YOjMXTaHy#8yvy" +
		"oEJk#tqHAiMDWbtv$rSJaBnlH5F4tUN$rOSRxi3wWEJGNzQVqMTAE9gKuA##lqD8FF8BhYV" +
		"hdW9rYdWTxb7MUJqn9fwWiCZm$p8pboT4Z8kkuwqay#XBjlWUcIGp7Gr6VWF8gz4SInGubA" +
		"daIvuEXcutpYIY7u7WSKV7HH9sVWEuYDqpdzr4#8JhCGgc9qW6b5mhqXw6f9jLXEmh#ar0U" +
		"m$7Ba3#FTbv0UGy1rg163BOAiJ7FQ$m7TiU26ozZYUeYPjtpe3iAyiTH7aRv3JxW4eDFIGF" +
		"40x#YNN5y0L7Y2wA6u5YA#CLxGNO#qQvV4JK0h#AxKBz3TE2vEBwRQBVzKAx4#Uc80RzEDw" +
		"56x078mU7bH4VSYVeWjFyvwkE9whL0VGdEcw5#aEZ8ggXV8UfJ3xLDr7uBKPVTYGvgXt8v2" +
		"dXrGRi7$Opw6AA3SNpmrJY#3FKRgEz3$JjHEyHiznhAZv2D8Ug0$7UPW$ewbEdWDm$zUmk5" +
		"znCvQzGODSPb7zYqm9YnoR1VZngvPB3jca2$taO$aFyzxmLFy2l6EE$J7Fb#23u$4BKy437" +
		"GNl6fiFaECT6FufCX1nVsFM4JG3a9CP3JuYjGbXELOrmxGbxC$S6t9VoxOgyfdW5RS1k0$h" +
		"NfHxHlUnJuTEqE7H#h8lWrGhirKFyJOu9ntXVpOTzVYFP3GAiQE6B#bM0ExNSDV7u2rxDHe" +
		"qyb8BBV5DI8KN80Zf7dFVO5YKTntXNnhaKDdYtw4#tV6GLztlzDebQ8rGhwLZUZp2Ig0jyg" +
		"Ds8#Ofox$XjZ27dN6z3kEQYVmbWNeqPx7USITKF#3W77zkX7U$IZTGbAJ$Wl8AhQ40Lpkoh" +
		"6erfjbDDGC6RLqLvrpBjkoCSX0r0mjeV0lXjoSCJ5A1YdRlUZFQo5RY#XHfzYoCUUpsAUOt" +
		"xlZZLmvA$e2zhiZtoKOxnAmA$rxSWfvchhMKG7LC4SnRejGPm3Za3Ua8Ss7#9u269XR0x0V" +
		"6YBzM9XNhV5Ukbq1cpdOzxkZ37TX6FmBaNiRl3fXBdT16sMWdz$SEo4#THjBL5tpEdkJL7G" +
		"t#xGTSUQw8xrtdqQob8KSEo1jTO3FCkV9ZeKzgN8xO7eIm$qlsGpQlIt3lBN5ckvj3VgZp2" +
		"tmQ4O#qyfV4kHYpZuLSSU4yFublOWAiCu5c6CIy6v27qlnJefmbmfmjeinPwHE1prQ1Iivp" +
		"Bqqy9#5CTSisw537ESi5#KO8wLleY#Oi#niEPBiMwjyQXN4DNS4x6mXaitegw3UYLuteEzu" +
		"KmKx3ExObxrU1tx3xZnosqPvbCP#bss3kqWNasqLnFxOKtae1RMKItCYrhl4jL6V#BeUod6" +
		"i$yfE8PpATPJCVfMZBPAmBi4Sw44ywwqDGh6j1HZ4iU#5H#8WhdQfYvHCyXg$mldQBi7kCK" +
		"ndvfjW0pxN2dcvDvOMpiXBt7ClnwuQuXZxFV#6sJ8UHpzxbkA6dFYKEnDSSoHlfmBzf6zHy" +
		"06N7R3ECHFH3uUmV43q6D$weirq1SvxOlzeo$orHVhlX$shtuO$txeVp#igtwte60S#o4tX" +
		"BqtKGjnC5yJs3VYc4yzwwCUX8AzAe7S4UOCGvvtGgmgZ6XdhCczqSSuOiMHXvvOxt5SR#B3" +
		"eUTxEgv1SN2e0evnh8iOsejZBwg2t1sAc774h8eSnf7VEDPSJnxd0nJiFrLvFFGZZdnNHNx" +
		"Zo64CEOdTWOAzC8xynN7DY8DB$4kCEyy1yb4Duv30NAk6iIZ2UYp2Nbc2TL62FPbXp4imls" +
		"eWNbahw32NU$9#ypq7ursAdFR37bp4rnF6OcUipPsNmGPpAB4JqIujKMEk9tR1CUPmDN1Yw" +
		"CykM6kx8hVLCUxLCUuCUr#2xy7Ov$hp#O5ziXJpBD4DDTPO0kilZlLOdUSEruyuhXDnpD44" +
		"vbeRzAav#2RGVWBNgfuBKMDCccFlIM2UDhyKTISKvAydSf30djWSUqO2#s42Us1Vv3E1yqE" +
		"7eSPSw8TS9x3FDCSUd#X3r0jhUZUidLvOuxsmDoGm$eToJjXd4hY6rq4xHSXHPunT0lrF86" +
		"Trq2R3jIA6lJI1$dJ6EavWNqnWRElW6fRWzcWxWRcSmFdkQ2FnANAAwsW2ure3Uwc5SKs0G" +
		"mtCeHZ6eeYlMLmFYh1lzCOuzyRSw8sze3VcGWBZsVjhxDV8PszSTqikX8olUUn$2TmNb6AU" +
		"ra1$Iv6t1F9JXFNQ2$nwOQvsnlMv5$RTeYMeCOzwyRvYdVVU3N6GYtBS7vHZZFV2TNOlv2w" +
		"1TX8OcwAhK6EkxGK#NJ5V#wFl$L4du9l0ljD$4h#tmgqM$sLWFjunzruhBkwvL0LznXXQVV" +
		"Wzc7lUlrLQr$zEdPzt3tUXMyUm3cDyderDwmviwjQbMqqnWl7YgzF7TSRvslavVLn$eEnNh" +
		"xgdUrWTj$aZRhrFBxTkiQ$7yNstRlk3MxS$rgqRNkFMXr$lrhsMktNlNu9n#zJswdryiYvU" +
		"VOBCeyz5NgtDA$gmrQsB6gTbZMzswzXM79UbvKM7wE84OpRe5DBkfk1vuxbwsyPRtBfuTw$" +
		"6ljXWbcnNV7MOjeC#fILktR3CYp4fl6$xIzowuv5ktVKSj#xrirltMH6LJpfsdv#2vzrsIH" +
		"yVyefNpt7hFQi5ROjn$rIy9dqUntvdbGLjckoPFYufJnzNntE0M5A#bsVRDQsd4zF7Hmpnx" +
		"AxosZqpz$usFCR7ROPRD#iTpjSgaMK7$kxMYLjbNN2lmJrskLkN9kVwT1mNURAwQRjIvCRw" +
		"FNqUu$TOOZrY3yHUoN2DP#jppq7y7e$Fw$mQdbkCUeUbZvkiTUkwP$ZqWzB7JMjviibfsG7" +
		"VkNMZiMxToLjxzRozWevEsreFyVlLw1nB9ykofWTvkb6yHZvnlMIuPj48horSA#ktyTd$FI" +
		"Fcd8pp#UdZHaiLxTtgrl6ZlFFHQLqSz#Abk5U9#$RQFRonYL$grKsyUdZuVZTTg9R77qaVD" +
		"swNFGxzefOVyRPQNg#jFbRTrtpyVlNwwbtBzpWghMlMq9CDIyiE7E1nFjcj3ntesQnBsnGz" +
		"4soluL2PGyClzFmQDLF8pfDbHVm##HVtkFzrQNd$RtInW$xDLwMFgtZt4rNUySLvLlP9dEJ" +
		"MnQqoTQwSRiWuNwUoy#at#OxnOAVInSIKvHwldE6LCxrobgASxPMxlJ8OvJMKyIZda2NAwJ" +
		"ZcvLye$yO5u3UKBt6CEq$w2ZNkDcabwfMerw9U2vzlKN#BUYjitySnBn$XU24LqsmS9mlka" +
		"b4OZH35eYTHXotFK0ajWi$RYF4spXVZU2QEP#BuEr5YD0xb9yX#mlawKIpw0BM$V9mg9QdZ" +
		"ALH4qr5FX$y4r1DGZqOz6lLRg7bPYbWJOSVBEwB427VrA8pcY1AZIR2PX7egv5CXcu7p3QW" +
		"tGBOUDI#VGBO4$YjGlX0bvXMBlaU#t58gojCunbqz2gEDq6#4tMeKF3D2uQ#$ycBnLtEbyY" +
		"dAPz2DGHjZuECMYpP1lWd7Gr3mR0o5qLXHB7eUjR#y0DcpeiJeNfohoekASb#4yb#K$o3#I" +
		"oWFYqzECcsv7$bu07bv6UKH76z6tpR3poqMRO7D5jJpKURXU1xgoT1DHlqWx5z1UHI#3r62" +
		"NaN1CriKHikymb#PVG$rSfJNHOaHdYMXC1gAuyTG7aSPXl84OWr7FHmSy4m9XT6FebYq0Bf" +
		"lK9#BSrxEIvMOxzWl2vQ1y1#8#JaGN0TId9v3$ETWEqgK65s4Dlrb5kIpqDuRqE6PCmgZaJ" +
		"WVYVDBKgMOBeJjXOZhbZXTYdDUBeEzlvmFtmjG#7iMt69vXT7bgAz0kHB7LuhQFRuAyQz2B" +
		"5xpzu9TYpQJvJgSNoTgVaF9K6AfSWFERn1riDm8#OsYZl7lAqI9yTzxG8dnt#z0YT6jg6z5" +
		"VHlgsr3pttEw7UtVWPgNGU9RArcgh8bOfY6Nqr3VYV8hok$$0yXb#f0=");

	public JavaParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 37: // import_declarations = import_declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 38: // import_declarations = import_declarations import_declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 39: // type_declarations = type_declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 40: // type_declarations = type_declarations type_declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 51: // modifiers = modifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 52: // modifiers = modifiers modifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 71: // interface_type_list = interface_type
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 72: // interface_type_list = interface_type_list COMMA interface_type
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 76: // class_body_declarations = class_body_declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 77: // class_body_declarations = class_body_declarations class_body_declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 88: // variable_declarators = variable_declarator
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 89: // variable_declarators = variable_declarators COMMA variable_declarator
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 103: // formal_parameter_list = formal_parameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 104: // formal_parameter_list = formal_parameter_list COMMA formal_parameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 110: // class_type_list = class_type
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 111: // class_type_list = class_type_list COMMA class_type
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 133: // interface_member_declarations = interface_member_declaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 134: // interface_member_declarations = interface_member_declarations interface_member_declaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 146: // variable_initializers = variable_initializer
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 147: // variable_initializers = variable_initializers COMMA variable_initializer
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 151: // block_statements = block_statement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 152: // block_statements = block_statements block_statement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 201: // switch_block_statement_groups = switch_block_statement_group
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 202: // switch_block_statement_groups = switch_block_statement_groups switch_block_statement_group
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 204: // switch_labels = switch_label
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 205: // switch_labels = switch_labels switch_label
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 220: // statement_expression_list = statement_expression
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 221: // statement_expression_list = statement_expression_list COMMA statement_expression
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 233: // catches = catch_clause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 234: // catches = catches catch_clause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 257: // argument_list = expression
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 258: // argument_list = argument_list COMMA expression
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 263: // dim_exprs = dim_expr
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 264: // dim_exprs = dim_exprs dim_expr
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 319: // and_expression = equality_expression
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 320: // and_expression = and_expression AND equality_expression
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 321: // exclusive_or_expression = and_expression
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 322: // exclusive_or_expression = exclusive_or_expression XOR and_expression
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 323: // inclusive_or_expression = exclusive_or_expression
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 324: // inclusive_or_expression = inclusive_or_expression OR exclusive_or_expression
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 325: // conditional_and_expression = inclusive_or_expression
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 326: // conditional_and_expression = conditional_and_expression ANDAND inclusive_or_expression
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 327: // conditional_or_expression = conditional_and_expression
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 328: // conditional_or_expression = conditional_or_expression OROR conditional_and_expression
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 32: // package_declaration_opt = 
			case 34: // import_declarations_opt = 
			case 36: // type_declarations_opt = 
			case 49: // modifiers_opt = 
			case 66: // super_opt = 
			case 69: // interfaces_opt = 
			case 74: // class_body_declarations_opt = 
			case 101: // formal_parameter_list_opt = 
			case 107: // throws_opt = 
			case 126: // extends_interfaces_opt = 
			case 131: // interface_member_declarations_opt = 
			case 149: // block_statements_opt = 
			case 213: // for_init_opt = 
			case 217: // for_update_opt = 
			case 222: // identifier_opt = 
			case 231: // catches_opt = 
			case 255: // argument_list_opt = 
			case 266: // dims_opt = 
			case 349: // expression_opt = 
			{
				return new Symbol(null);
			}
			case 0: // literal = INTEGER_LITERAL
			case 1: // literal = FLOATING_POINT_LITERAL
			case 2: // literal = BOOLEAN_LITERAL
			case 3: // literal = CHARACTER_LITERAL
			case 4: // literal = STRING_LITERAL
			case 5: // literal = NULL_LITERAL
			case 6: // type = primitive_type
			case 7: // type = reference_type
			case 8: // primitive_type = numeric_type
			case 9: // primitive_type = BOOLEAN
			case 10: // numeric_type = integral_type
			case 11: // numeric_type = floating_point_type
			case 12: // integral_type = BYTE
			case 13: // integral_type = SHORT
			case 14: // integral_type = INT
			case 15: // integral_type = LONG
			case 16: // integral_type = CHAR
			case 17: // floating_point_type = FLOAT
			case 18: // floating_point_type = DOUBLE
			case 19: // reference_type = class_or_interface_type
			case 20: // reference_type = array_type
			case 21: // class_or_interface_type = name
			case 22: // class_type = class_or_interface_type
			case 23: // interface_type = class_or_interface_type
			case 26: // name = simple_name
			case 27: // name = qualified_name
			case 28: // simple_name = IDENTIFIER
			case 31: // package_declaration_opt = package_declaration
			case 33: // import_declarations_opt = import_declarations
			case 35: // type_declarations_opt = type_declarations
			case 42: // import_declaration = single_type_import_declaration
			case 43: // import_declaration = type_import_on_demand_declaration
			case 46: // type_declaration = class_declaration
			case 47: // type_declaration = interface_declaration
			case 48: // type_declaration = SEMICOLON
			case 50: // modifiers_opt = modifiers
			case 53: // modifier = PUBLIC
			case 54: // modifier = PROTECTED
			case 55: // modifier = PRIVATE
			case 56: // modifier = STATIC
			case 57: // modifier = ABSTRACT
			case 58: // modifier = FINAL
			case 59: // modifier = NATIVE
			case 60: // modifier = SYNCHRONIZED
			case 61: // modifier = TRANSIENT
			case 62: // modifier = VOLATILE
			case 63: // modifier = STRICTFP
			case 67: // super_opt = super
			case 70: // interfaces_opt = interfaces
			case 75: // class_body_declarations_opt = class_body_declarations
			case 78: // class_body_declaration = class_member_declaration
			case 79: // class_body_declaration = static_initializer
			case 80: // class_body_declaration = constructor_declaration
			case 81: // class_body_declaration = block
			case 82: // class_member_declaration = field_declaration
			case 83: // class_member_declaration = method_declaration
			case 85: // class_member_declaration = interface_declaration
			case 86: // class_member_declaration = SEMICOLON
			case 90: // variable_declarator = variable_declarator_id
			case 92: // variable_declarator_id = IDENTIFIER
			case 94: // variable_initializer = expression
			case 95: // variable_initializer = array_initializer
			case 102: // formal_parameter_list_opt = formal_parameter_list
			case 108: // throws_opt = throws
			case 112: // method_body = block
			case 113: // method_body = SEMICOLON
			case 127: // extends_interfaces_opt = extends_interfaces
			case 132: // interface_member_declarations_opt = interface_member_declarations
			case 135: // interface_member_declaration = constant_declaration
			case 136: // interface_member_declaration = abstract_method_declaration
			case 137: // interface_member_declaration = class_declaration
			case 138: // interface_member_declaration = interface_declaration
			case 139: // interface_member_declaration = SEMICOLON
			case 140: // constant_declaration = field_declaration
			case 150: // block_statements_opt = block_statements
			case 153: // block_statement = local_variable_declaration_statement
			case 154: // block_statement = statement
			case 155: // block_statement = class_declaration
			case 156: // block_statement = interface_declaration
			case 160: // statement = statement_without_trailing_substatement
			case 161: // statement = labeled_statement
			case 162: // statement = if_then_statement
			case 163: // statement = if_then_else_statement
			case 164: // statement = while_statement
			case 165: // statement = for_statement
			case 166: // statement_no_short_if = statement_without_trailing_substatement
			case 167: // statement_no_short_if = labeled_statement_no_short_if
			case 168: // statement_no_short_if = if_then_else_statement_no_short_if
			case 169: // statement_no_short_if = while_statement_no_short_if
			case 170: // statement_no_short_if = for_statement_no_short_if
			case 171: // statement_without_trailing_substatement = block
			case 172: // statement_without_trailing_substatement = empty_statement
			case 173: // statement_without_trailing_substatement = expression_statement
			case 174: // statement_without_trailing_substatement = switch_statement
			case 175: // statement_without_trailing_substatement = do_statement
			case 176: // statement_without_trailing_substatement = break_statement
			case 177: // statement_without_trailing_substatement = continue_statement
			case 178: // statement_without_trailing_substatement = return_statement
			case 179: // statement_without_trailing_substatement = synchronized_statement
			case 180: // statement_without_trailing_substatement = throw_statement
			case 181: // statement_without_trailing_substatement = try_statement
			case 182: // empty_statement = SEMICOLON
			case 186: // statement_expression = assignment
			case 187: // statement_expression = preincrement_expression
			case 188: // statement_expression = predecrement_expression
			case 189: // statement_expression = postincrement_expression
			case 190: // statement_expression = postdecrement_expression
			case 191: // statement_expression = method_invocation
			case 192: // statement_expression = class_instance_creation_expression
			case 214: // for_init_opt = for_init
			case 215: // for_init = statement_expression_list
			case 216: // for_init = local_variable_declaration
			case 218: // for_update_opt = for_update
			case 219: // for_update = statement_expression_list
			case 223: // identifier_opt = IDENTIFIER
			case 232: // catches_opt = catches
			case 237: // primary = primary_no_new_array
			case 238: // primary = array_creation_expression
			case 239: // primary_no_new_array = literal
			case 240: // primary_no_new_array = THIS
			case 242: // primary_no_new_array = class_instance_creation_expression
			case 243: // primary_no_new_array = field_access
			case 244: // primary_no_new_array = method_invocation
			case 245: // primary_no_new_array = array_access
			case 256: // argument_list_opt = argument_list
			case 267: // dims_opt = dims
			case 279: // postfix_expression = primary
			case 280: // postfix_expression = name
			case 281: // postfix_expression = postincrement_expression
			case 282: // postfix_expression = postdecrement_expression
			case 285: // unary_expression = preincrement_expression
			case 286: // unary_expression = predecrement_expression
			case 289: // unary_expression = unary_expression_not_plus_minus
			case 292: // unary_expression_not_plus_minus = postfix_expression
			case 295: // unary_expression_not_plus_minus = cast_expression
			case 299: // multiplicative_expression = unary_expression
			case 303: // additive_expression = multiplicative_expression
			case 306: // shift_expression = additive_expression
			case 310: // relational_expression = shift_expression
			case 316: // equality_expression = relational_expression
			case 329: // conditional_expression = conditional_or_expression
			case 331: // assignment_expression = conditional_expression
			case 332: // assignment_expression = assignment
			case 334: // left_hand_side = name
			case 335: // left_hand_side = field_access
			case 336: // left_hand_side = array_access
			case 337: // assignment_operator = EQ
			case 338: // assignment_operator = MULTEQ
			case 339: // assignment_operator = DIVEQ
			case 340: // assignment_operator = MODEQ
			case 341: // assignment_operator = PLUSEQ
			case 342: // assignment_operator = MINUSEQ
			case 343: // assignment_operator = LSHIFTEQ
			case 344: // assignment_operator = RSHIFTEQ
			case 345: // assignment_operator = URSHIFTEQ
			case 346: // assignment_operator = ANDEQ
			case 347: // assignment_operator = XOREQ
			case 348: // assignment_operator = OREQ
			case 350: // expression_opt = expression
			case 351: // expression = assignment_expression
			case 352: // constant_expression = expression
			{
				return _symbols[offset + 1];
			}
			case 24: // array_type = primitive_type dims
			case 25: // array_type = name dims
			case 65: // super = EXTENDS class_type
			case 68: // interfaces = IMPLEMENTS interface_type_list
			case 96: // method_declaration = method_header method_body
			case 105: // formal_parameter = type variable_declarator_id
			case 109: // throws = THROWS class_type_list
			case 114: // static_initializer = STATIC block
			case 120: // constructor_body = LBRACE RBRACE
			case 128: // extends_interfaces = EXTENDS interface_type
			case 141: // abstract_method_declaration = method_header SEMICOLON
			case 145: // array_initializer = LBRACE RBRACE
			case 157: // local_variable_declaration_statement = local_variable_declaration SEMICOLON
			case 158: // local_variable_declaration = type variable_declarators
			case 185: // expression_statement = statement_expression SEMICOLON
			case 200: // switch_block = LBRACE RBRACE
			case 203: // switch_block_statement_group = switch_labels block_statements
			case 207: // switch_label = DEFAULT COLON
			case 236: // finally = FINALLY block
			case 268: // dims = LBRACK RBRACK
			case 283: // postincrement_expression = postfix_expression PLUSPLUS
			case 284: // postdecrement_expression = postfix_expression MINUSMINUS
			case 287: // unary_expression = PLUS unary_expression
			case 288: // unary_expression = MINUS unary_expression
			case 290: // preincrement_expression = PLUSPLUS unary_expression
			case 291: // predecrement_expression = MINUSMINUS unary_expression
			case 293: // unary_expression_not_plus_minus = COMP unary_expression
			case 294: // unary_expression_not_plus_minus = NOT unary_expression
			{
				return _symbols[offset + 2];
			}
			case 29: // qualified_name = name DOT IDENTIFIER
			case 30: // compilation_unit = package_declaration_opt import_declarations_opt type_declarations_opt
			case 41: // package_declaration = PACKAGE name SEMICOLON
			case 44: // single_type_import_declaration = IMPORT name SEMICOLON
			case 73: // class_body = LBRACE class_body_declarations_opt RBRACE
			case 91: // variable_declarator = variable_declarator_id EQ variable_initializer
			case 93: // variable_declarator_id = variable_declarator_id LBRACK RBRACK
			case 100: // method_declarator = method_declarator LBRACK RBRACK
			case 106: // formal_parameter = FINAL type variable_declarator_id
			case 118: // constructor_body = LBRACE explicit_constructor_invocation RBRACE
			case 119: // constructor_body = LBRACE block_statements RBRACE
			case 129: // extends_interfaces = extends_interfaces COMMA interface_type
			case 130: // interface_body = LBRACE interface_member_declarations_opt RBRACE
			case 143: // array_initializer = LBRACE variable_initializers RBRACE
			case 144: // array_initializer = LBRACE COMMA RBRACE
			case 148: // block = LBRACE block_statements_opt RBRACE
			case 159: // local_variable_declaration = FINAL type variable_declarators
			case 183: // labeled_statement = IDENTIFIER COLON statement
			case 184: // labeled_statement_no_short_if = IDENTIFIER COLON statement_no_short_if
			case 198: // switch_block = LBRACE switch_block_statement_groups RBRACE
			case 199: // switch_block = LBRACE switch_labels RBRACE
			case 206: // switch_label = CASE constant_expression COLON
			case 224: // break_statement = BREAK identifier_opt SEMICOLON
			case 225: // continue_statement = CONTINUE identifier_opt SEMICOLON
			case 226: // return_statement = RETURN expression_opt SEMICOLON
			case 227: // throw_statement = THROW expression SEMICOLON
			case 229: // try_statement = TRY block catches
			case 241: // primary_no_new_array = LPAREN expression RPAREN
			case 246: // primary_no_new_array = primitive_type DOT CLASS
			case 247: // primary_no_new_array = VOID DOT CLASS
			case 248: // primary_no_new_array = array_type DOT CLASS
			case 249: // primary_no_new_array = name DOT CLASS
			case 250: // primary_no_new_array = name DOT THIS
			case 265: // dim_expr = LBRACK expression RBRACK
			case 269: // dims = dims LBRACK RBRACK
			case 270: // field_access = primary DOT IDENTIFIER
			case 271: // field_access = SUPER DOT IDENTIFIER
			case 300: // multiplicative_expression = multiplicative_expression MULT unary_expression
			case 301: // multiplicative_expression = multiplicative_expression DIV unary_expression
			case 302: // multiplicative_expression = multiplicative_expression MOD unary_expression
			case 304: // additive_expression = additive_expression PLUS multiplicative_expression
			case 305: // additive_expression = additive_expression MINUS multiplicative_expression
			case 307: // shift_expression = shift_expression LSHIFT additive_expression
			case 308: // shift_expression = shift_expression RSHIFT additive_expression
			case 309: // shift_expression = shift_expression URSHIFT additive_expression
			case 311: // relational_expression = relational_expression LT shift_expression
			case 312: // relational_expression = relational_expression GT shift_expression
			case 313: // relational_expression = relational_expression LTEQ shift_expression
			case 314: // relational_expression = relational_expression GTEQ shift_expression
			case 315: // relational_expression = relational_expression INSTANCEOF reference_type
			case 317: // equality_expression = equality_expression EQEQ relational_expression
			case 318: // equality_expression = equality_expression NOTEQ relational_expression
			case 333: // assignment = left_hand_side assignment_operator assignment_expression
			{
				return _symbols[offset + 3];
			}
			case 87: // field_declaration = modifiers_opt type variable_declarators SEMICOLON
			case 97: // method_header = modifiers_opt type method_declarator throws_opt
			case 98: // method_header = modifiers_opt VOID method_declarator throws_opt
			case 99: // method_declarator = IDENTIFIER LPAREN formal_parameter_list_opt RPAREN
			case 115: // constructor_declaration = modifiers_opt constructor_declarator throws_opt constructor_body
			case 116: // constructor_declarator = simple_name LPAREN formal_parameter_list_opt RPAREN
			case 117: // constructor_body = LBRACE explicit_constructor_invocation block_statements RBRACE
			case 142: // array_initializer = LBRACE variable_initializers COMMA RBRACE
			case 197: // switch_block = LBRACE switch_block_statement_groups switch_labels RBRACE
			case 230: // try_statement = TRY block catches_opt finally
			case 259: // array_creation_expression = NEW primitive_type dim_exprs dims_opt
			case 260: // array_creation_expression = NEW class_or_interface_type dim_exprs dims_opt
			case 261: // array_creation_expression = NEW primitive_type dims array_initializer
			case 262: // array_creation_expression = NEW class_or_interface_type dims array_initializer
			case 273: // method_invocation = name LPAREN argument_list_opt RPAREN
			case 277: // array_access = name LBRACK expression RBRACK
			case 278: // array_access = primary_no_new_array LBRACK expression RBRACK
			case 297: // cast_expression = LPAREN expression RPAREN unary_expression_not_plus_minus
			{
				return _symbols[offset + 4];
			}
			case 45: // type_import_on_demand_declaration = IMPORT name DOT MULT SEMICOLON
			case 121: // explicit_constructor_invocation = THIS LPAREN argument_list_opt RPAREN SEMICOLON
			case 122: // explicit_constructor_invocation = SUPER LPAREN argument_list_opt RPAREN SEMICOLON
			case 125: // interface_declaration = modifiers_opt INTERFACE IDENTIFIER extends_interfaces_opt interface_body
			case 193: // if_then_statement = IF LPAREN expression RPAREN statement
			case 196: // switch_statement = SWITCH LPAREN expression RPAREN switch_block
			case 208: // while_statement = WHILE LPAREN expression RPAREN statement
			case 209: // while_statement_no_short_if = WHILE LPAREN expression RPAREN statement_no_short_if
			case 228: // synchronized_statement = SYNCHRONIZED LPAREN expression RPAREN block
			case 235: // catch_clause = CATCH LPAREN formal_parameter RPAREN block
			case 251: // class_instance_creation_expression = NEW class_type LPAREN argument_list_opt RPAREN
			case 272: // field_access = name DOT SUPER DOT IDENTIFIER
			case 296: // cast_expression = LPAREN primitive_type dims_opt RPAREN unary_expression
			case 298: // cast_expression = LPAREN name dims RPAREN unary_expression_not_plus_minus
			case 330: // conditional_expression = conditional_or_expression QUESTION expression COLON conditional_expression
			{
				return _symbols[offset + 5];
			}
			case 64: // class_declaration = modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body
			case 84: // class_member_declaration = modifiers_opt CLASS IDENTIFIER super_opt interfaces_opt class_body
			case 252: // class_instance_creation_expression = NEW class_type LPAREN argument_list_opt RPAREN class_body
			case 274: // method_invocation = primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN
			case 275: // method_invocation = SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
			{
				return _symbols[offset + 6];
			}
			case 123: // explicit_constructor_invocation = primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON
			case 124: // explicit_constructor_invocation = primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON
			case 194: // if_then_else_statement = IF LPAREN expression RPAREN statement_no_short_if ELSE statement
			case 195: // if_then_else_statement_no_short_if = IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if
			case 210: // do_statement = DO statement WHILE LPAREN expression RPAREN SEMICOLON
			case 253: // class_instance_creation_expression = primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN
			{
				return _symbols[offset + 7];
			}
			case 254: // class_instance_creation_expression = primary DOT NEW IDENTIFIER LPAREN argument_list_opt RPAREN class_body
			case 276: // method_invocation = name DOT SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN
			{
				return _symbols[offset + 8];
			}
			case 211: // for_statement = FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement
			case 212: // for_statement_no_short_if = FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if
			{
				return _symbols[offset + 9];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
